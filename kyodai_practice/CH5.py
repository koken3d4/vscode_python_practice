#
def square_root(x):
    rnew = x
    #
    diff = rnew-x/rnew
    diff = abs(diff)
    # if(diff<0):
    #     diff=abss
    while(diff > 1.0e-6):
        r1 = rnew
        r2 = x/r1
        rnew = (r1+r2)/2
        print(r1, rnew, r2)
        diff = abs(r1-r2)
    return rnew


#
# ここからメインプログラム
v = 2
r = square_root(2)
print("結果は", r)

#関数化するにはdefをつけて関数名をつけて、最後にコロンをつける。コロンをつけると自動的に一段落下がる。
#返り型の指定は不要なのだろうか?
#返値が不要ならばreturnは不要のようだ。つまりvoidなどを指定する必要もないという事か。


# 仮引数と実引数について　。なにこれ？
# 呼び出し側が、実引数で、関数の定義側が仮引数となる。なるほど。
# ローカル変数、　関数内で定義された変数のこと、関数内でのみ使用可能で、実行されれば毎回消去される。
# グローバル変数。関数外で定義されている変数のこと。値を読み取ることのみ可能。
# グローバル変数への代入に関しては、global宣言された変数のみ可能。

# グローバル変数の読み取りを比較的安全に許可している一方で、書き込みをするときは、globalを宣言する必要が有り、安全性と利便性のバランスをとるようにしているとのこと。


# 関数の副作用について
# 書き換え可能な引数を通じて情報をやりとりするもの。ソースコードには明示されにくいため、プログラムが分かりにくくなるという弊害がある。

a = 0


def f():
    global a
    a = a+1


def g(x):
    x[0] = 0


f()
print(a)  # global変数が使われているため値は変化する。
b = [1, 2, 3]
g(b)  # これもリストの値は変化出来るので値が変わる。
print(b)
